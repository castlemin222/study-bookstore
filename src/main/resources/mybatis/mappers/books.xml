<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.store.mapper.BookMapper">
	
	<!-- 전체 도서목록 조회 -->
	<select id="getAllBooks" parameterType="map" resultType="Book">
		select
			*
		from(
			select
				row_number() over(<choose>
									<when test="sort == 'recent'">
										order by book_created_date desc
									</when>
									<when test="sort == 'title'">
										order by book_title desc
									</when>
									<when test="sort == 'low'">
										order by book_discount_price asc
									</when>
									<when test="sort == 'high'">
										order by book_discount_price desc
									</when>
									<otherwise>
										order by book_id desc
									</otherwise>
								</choose>)	as row_numbers,
				book_id						as id,
				book_title					as title,
				book_author					as author,
				book_publisher				as publisher,
				book_price					as price,
				book_discount_price			as discountPrice,
				book_stock					as stock,
				book_on_sell				as onSell,
				book_review_count			as reviewCount,
				book_review_score			as reviewScore,
				book_created_date			as createdDate,
				book_updated_date			as updatedDate
			from
				books
			<where>
				<choose>
					<when test="opt == 'title'">
						book_title like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'author'">
						book_author	like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'publisher'">
						book_publisher	like '%' || #{keyword} || '%'
					</when>
				</choose>
				<if test="keyword != null">
					and (book_title like '%' || #{keyword} || '%'
					or book_author	like '%' || #{keyword} || '%'
					or book_publisher	like '%' || #{keyword} || '%')
				</if>
			</where>
			)
		where
			row_numbers between #{begin} and #{end}
	</select>
	
	<!-- 도서목록 갯수 조회 -->
	<select id="getTotalRows" parameterType="map" resultType="int">
		select
			count(*)
		from
			books
		<where>
			<choose>
				<when test="opt == 'title'">
					book_title like '%' || #{keyword} || '%'
				</when>
				<when test="opt == 'author'">
					book_author	like '%' || #{keyword} || '%'
				</when>
				<when test="opt == 'publisher'">
					book_publisher	like '%' || #{keyword} || '%'
				</when>
			</choose>
			<if test="keyword != null">
				and (book_title like '%' || #{keyword} || '%'
				or book_author	like '%' || #{keyword} || '%'
				or book_publisher	like '%' || #{keyword} || '%')
			</if>
		</where>
	</select>
	
	<!-- 도서아이디로 도서 정보 조회 -->
	<select id="getBookById" parameterType="int" resultType="Book">
		select
			book_id					as id,
			book_title				as title,
			book_author				as author,
			book_publisher			as publisher,
			book_price				as price,
			book_discount_price		as discountPrice,
			book_stock				as stock,
			book_on_sell			as onSell,
			book_review_count		as reviewCount,
			book_review_score		as reviewScore,
			book_created_date		as createdDate,
			book_updated_date		as updatedDate
		from
			books
		where
			book_id	= #{value}
	</select>
	
	<!-- 전체 리뷰 조회 -->
	<select id="getAllReview" parameterType="int" resultType="ReviewDto">
		select
			A.review_id					as reviewId,
			A.review_content			as content,
			A.review_score				as score,
			A.review_created_date		as createdDate,
			A.review_updated_date		as updatedDate,
			A.book_id					as bookId,
			A.user_id					as userId,
			B.user_name					as userName
		from
			reviews A, users B
		where
			A.user_id = B.user_id
	</select>
	
	
	<!-- 리뷰 추가 -->
	<insert id="insertReview" parameterType="Review">
		insert into reviews
			(review_id, review_content, review_score, book_id, user_id)
		values
			(reviews_seq.nextval, #{content}, #{score}, #{bookId}, #{userId})
	</insert>
	
</mapper>